# https://github.com/vouch/vouch-proxy#installation
server {
    listen 88;
    server_name 172.17.0.1;

    error_log  /var/log/nginx/error.log debug;
    access_log /var/log/nginx/error.log main;

    # Note: replace the following urls to your real services
    set $auth_proxy_root_url "http://172.17.0.1:9090";
    ## For Vouch Proxy, the logout url must be present in the configuration file on the list 'vouch.post_logout_redirect_uris'
    set $auth_keycloak_logout_url "http://172.17.0.1:8086/auth/realms/default/protocol/openid-connect/logout";

    # send all requests to the `/validate` endpoint for authorization
    auth_request /validate;

    location = /validate {
        internal;
        proxy_cache off;
        # forward the /validate request to Vouch Proxy
        proxy_pass $auth_proxy_root_url/validate;

        # be sure to pass the original host header
        proxy_set_header Host $http_host;

        # Vouch Proxy only acts on the request headers
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";

        # these return values are used by the @error401 call
        auth_request_set $auth_resp_jwt $upstream_http_x_vouch_jwt;
        auth_request_set $auth_resp_err $upstream_http_x_vouch_err;
        auth_request_set $auth_resp_failcount $upstream_http_x_vouch_failcount;
    }

    # if validate returns `401 not authorized` then forward the request to the @error401 block
    error_page 401 = @error401;

    location @error401 {
        # redirect to Vouch Proxy for login
        return 302 $auth_proxy_root_url/login?url=$scheme://$http_host$request_uri&vouch-failcount=$auth_resp_failcount&X-Vouch-Token=$auth_resp_jwt&error=$auth_resp_err;
    }

    # Set the global variables which will be used in the directive 'sub_filter'
    set $login_path "/login";
    set $logout_path "/logout";

    location = /login {
        return 302 $auth_proxy_root_url/login?url=$scheme://$http_host;
    }

    location = /logout {
        return 302 $auth_proxy_root_url/logout?url=$auth_keycloak_logout_url%3Fredirect_uri%3D$scheme://$http_host;
    }

    # proxy pass authorized requests to your service
    location / {
        # Note: $auth_resp_x_vouch_user actually is the user's email,
        #      the $auth_resp_x_vouch_username is the real user name
        auth_request_set $auth_resp_x_vouch_user $upstream_http_x_vouch_user;
        auth_request_set $auth_resp_x_vouch_username $upstream_http_x_vouch_idp_claims_preferred_username;
        auth_request_set $auth_resp_x_vouch_idp_accesstoken $upstream_http_x_vouch_idp_accesstoken;

        proxy_set_header Host $http_host;
        proxy_set_header X-Keycloak-Sec-Auth $auth_resp_x_vouch_user:$auth_resp_x_vouch_idp_accesstoken;
        proxy_hide_header X-Remote-User-Access-Token;

        client_max_body_size 500M;
        # Disable cache of assets
        proxy_cache            off;
        proxy_read_timeout     600;
        proxy_connect_timeout  600;

        proxy_pass http://172.17.0.1:8903;

        proxy_hide_header WWW-Authenticate;  # Avoid to pop-up the login dialog
        # The script will do:
        # - Inject the action to the logout button, and redirect the page to the logout url after the logout button is clicked
        # - Inject the action to the login button, and redirect the page to the login url after the login button is clicked
        # - Inspect the HTTP status 401, and redirect the page to the login url when the 401 is occurred
        # - Never show the SignIn window any more, because the script will update the authentication automatically by redirecting the page to the login url
        sub_filter '</body>' '<script type="text/javascript">(function inject_logout() { var dom = document.querySelector("a[id^=\'nx-header-signout-\']"); if (!dom) { setTimeout(inject_logout, 200); } else { dom.addEventListener("click", function (event) { event.stopPropagation(); window.location.href = "$logout_path"; }, true); }})(); (function inject_login() { var dom = document.querySelector("a[id^=\'nx-header-signin-\']"); if (!dom) { setTimeout(inject_login, 200); } else { dom.addEventListener("click", function (event) { event.stopPropagation(); window.location.href = "$login_path" + window.location.hash; }, true); }})(); (function inject_401() { if (Ext && Ext.Ajax && Ext.Ajax.onRequestComplete) { var onRequestComplete = Ext.Ajax.onRequestComplete; Ext.Ajax.onRequestComplete = function(a) { if (a && a.result && a.result.status == 401) { window.location.href = "$login_path" + window.location.hash; } else { onRequestComplete.call(this, a); } } } else { setTimeout(inject_401, 200); } })(); (function hide_signin_win() { if (NX && NX.controller && NX.controller.User) { NX.controller.User.prototype.showSignInWindow = function() {} } else { setTimeout(hide_signin_win, 200); } })();</script></body>';
        sub_filter_once on;

        # Just for debugging, you may not want it
        # access_by_lua_block {
        #     ngx.log(ngx.DEBUG, 'auth_resp_x_vouch_user: '..(ngx.var.auth_resp_x_vouch_user or '')..', auth_resp_x_vouch_idp_accesstoken: '..(ngx.var.auth_resp_x_vouch_idp_accesstoken or ''))
        # }
    }
}
